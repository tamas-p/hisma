@startuml Route
class Route<T>
class OverlayRoute<T>
class TransitionRoute<T>
class ModalRoute<T>
class PageRoute<T>
class PopupRoute<T>
class CupertinoModalPopupRoute<T>
class RawDialogRoute<T> 
class MaterialPageRoute<T>
class CupertinoPageRoute<T>
class PageRouteBuilder<T>
class DialogRoute<T>

Route <|-- OverlayRoute
OverlayRoute <|-- TransitionRoute
TransitionRoute <|-- ModalRoute
ModalRoute <|-- PageRoute
ModalRoute <|-- PopupRoute
PopupRoute <|-- CupertinoModalPopupRoute
PopupRoute <|-- RawDialogRoute
RawDialogRoute <|-- DialogRoute
PageRoute <|-- MaterialPageRoute
PageRoute <|-- CupertinoPageRoute
PageRoute <|-- PageRouteBuilder
@enduml

@startuml Page
class RouteSettings
class Page<T>
class MaterialPage<T>
class CupertinoPage<T>

RouteSettings <|-- Page
Page <|-- MaterialPage
Page <|-- CupertinoPage
@enduml

@startuml routing
class MaterialApp <<StatefulWidget>>
class Navigator <<StatefulWidget>>
class RouterDelegate<T> <<Listenable>>
class RouteInformationParser<T>
class RouteInformation
class RouteInformationProvider <<ValueListenable<RouteInformation>>>
class Router<T>

Navigator -> NavigatorState
NavigatorState -> Overlay
MaterialApp --> RouterDelegate
MaterialApp --> RouteInformationParser

RouterDelegate --> Navigator
Navigator *-- "*" Route
Page *-- Router
Page *- Screen
Route "settings" --> Page
Page  --->  Route : create

@enduml

@startuml routing_object_diagram
' We hide all incl. <<highlighted>> stereotype
hide stereotype
skinparam object<<highlighted>> {
    borderThickness 4
    ' borderColor Fuchsia
    borderColor Blue
    ' FontStyle bold
}

skinparam backgroundColor LightGray

!$widget = Pink
!$widgetLink = Red

!$router = LightBlue
!$delegate = LightSeaGreen
!$navigator = LightSkyBlue

!$element = LightBlue

!$state = LightYellow

!$stateLink = Orange

!$renderObject = LightGreen

!$renderLink = Green

skinparam linetype polyline
skinparam nodesep 120
skinparam ranksep 100

package Widgets {
    !$IHW="Widget\nProxyWidget\nInheritedWidget"
    !$SLW="Widget\nStatelessWidget"
    !$SFW="Widget\nStatefulWidget"
    !$IHMW="Widget\nProxyWidget\nInheritedWidget\nInheritedModel"
    !$ROW="Widget\nRenderObjectWidget"
    !$SCROW="Widget\nRenderObjectWidget\nSingleChildRenderObjectWidget"
    !$MCROW="Widget\nRenderObjectWidget\nMultiChildRenderObjectWidget"
    !$LROW="Widget\nRenderObjectWidget\nLeafRenderObjectWidget"

object "Widget\nStatefulWidget\n**MaterialApp** : myApp" as myApp #$widget
object "Widget\nStatefulWidget\n**WidgetsApp** :" as wapp #$widget
object "Widget\nStatefulWidget\n**Router**<Object> :" as topr #$widget
object topr <<highlighted>> {
}
  object "Listenable\nValueListenable<RouteInformation>\n**RouterDelegate<T>** :" as rootRd #$delegate
  object "Listenable\nValueListenable<RouteInformation>\nRouteInformationProvider\n**DefaultRouteInformationProvider** :" as rootRipr #$delegate
  object "RouteInformationParser<T>\n**RootInformationParser**<RootAppState> :" as rootRipa #$delegate
object "Widget\nStatefulWidget\n**Navigator** :" as rootN #$widget
object rootN <<highlighted>> {
}
  object "**List**<**Page**<dynamic>> :" as rootPages
  ' object "RouteSettings\nPage<T>\nMaterialPage<T> : " as screenAPage
  object "RouteSettings\nPage<T>\nMaterialPage<T> : " as childRouterPage
object "Widget\nStatefulWidget\n**Overlay** :" as rootOverlay #$widget
object "Widget\nRenderObjectWidget\nMultiChildRenderObjectWidget\n**_Theatre** :" as rootTheatre #$widget
' object "Widget\nStatefulWidget\n**_OverlayEntryWidget** : screenA" as OEScreenA #$widget
object "Widget\nStatefulWidget\n**_OverlayEntryWidget** : ignore" as OEToIgnore #$widget
object "Widget\nStatefulWidget\n**_OverlayEntryWidget** : router" as OEChildRouter #$widget
' object "Widget\nStatelessWidget\n**RootScreenA** :" as screenA #$widget
object "Widget\nRenderObjectWidget\nSingleChildRenderObjectWidget\n**IgnorePointer** :" as ignore #$widget
object "Widget\nStatefulWidget\n**Router**<Object> :" as childRouter #$widget
object childRouter <<highlighted>> {
}
  object "Listenable\nValueListenable<RouteInformation>\n**RouterDelegate<T>** :" as childRd #$delegate
object "Widget\nStatefulWidget\n**Navigator** :" as childN #$widget
object childN <<highlighted>> {
}
object "Widget\nStatefulWidget\n**Overlay** :" as childOverlay #$widget
object "Widget\nRenderObjectWidget\nMultiChildRenderObjectWidget\n**_Theatre** :" as childTheatre #$widget



topr *-- rootRd
topr *-- rootRipr
topr *-- rootRipa

rootN "pages" *---- rootPages 
' rootPages *-- screenAPage
rootPages *-- childRouterPage

childRouter *-- childRd

myApp .[hidden]. wapp
wapp .[hidden]. topr
topr ..[hidden]. rootN
rootN .....[hidden]. rootOverlay
rootOverlay .[hidden]. rootTheatre
childRouter ..[hidden]. childN
childN .[hidden]. childOverlay
childOverlay .[hidden]. childTheatre

' rootTheatre "children[0]" *-- OEScreenA : "\t\t"
rootTheatre "children[1]" *-- OEToIgnore : "\t\t"
rootTheatre "children[2]" *-- OEChildRouter : "\t\t"

' OEScreenA .. screenA
OEToIgnore .. ignore
OEChildRouter .. childRouter


' rootN "build" ...[hidden].> wapp
}
package Elements {
    !$SLE="Element\nComponentElement\nStatelessElement"
    !$SFE="Element\nComponentElement\nStatefulElement"
    !$IHE="Element\nComponentElement\nProxyElement\nInheritedElement"
    !$MCROE="Element\nRenderObjectElement\nMultiChildRenderObjectElement"
    !$SCROE="Element\nRenderObjectElement\nSingleChildRenderObjectElement"

object "$SFE :" as materialAppElement #$element
object "$SFE :" as widgetsAppElement #$element
object "$SFE :" as rootRouterElement #$element
object rootRouterElement <<highlighted>> {
}
object "$SFE :" as rootNavigatorElement #$element
object rootNavigatorElement <<highlighted>> {
}
object "$SFE :" as rootOverlayElement #$element
object "$MCROE\n_TheatreElement :" as theatreRenderObjectElement #$element
' object "$SFE :" as OEEScreenA #$element
object "$SFE :" as OEEIgnore #$element
object "$SFE :" as OEEChildRouter #$element
' object "$SLE :" as screenASLE #$element
object "$SCROE :" as ignorePointerSFE #$element
object "$SFE :" as childRouterSFE #$element
object childRouterSFE <<highlighted>> {
}
object "$SFE :" as childNavigatorSFE #$element
object childNavigatorSFE <<highlighted>> {
}
object "$SFE :" as childOverlayElement #$element
object "$MCROE\n_TheatreElement :" as childTheatreRenderObjectElement #$element

materialAppElement "_child" -- "_parent" widgetsAppElement
widgetsAppElement "_child" -- "_parent" rootRouterElement
rootRouterElement "_child" --- "_parent" rootNavigatorElement
rootNavigatorElement "_child" ------ "_parent" rootOverlayElement
rootOverlayElement "_child" -- "_parent" theatreRenderObjectElement
' theatreRenderObjectElement "_children[0]" -- "_parent" OEEScreenA
theatreRenderObjectElement "_children[0]" -- "_parent" OEEIgnore
theatreRenderObjectElement "_children[1]" -- "_parent" OEEChildRouter
' OEEScreenA "_child" -- "_parent" screenASLE
OEEIgnore "_child" -- "_parent" ignorePointerSFE
OEEChildRouter "_child" -- "_parent" childRouterSFE
childRouterSFE "_child" --- "_parent" childNavigatorSFE
childNavigatorSFE "_child" -- "_parent" childOverlayElement
childOverlayElement "_child" -- "_parent" childTheatreRenderObjectElement

object "State<MaterialApp>\n**_MaterialAppState** : myApp" as myAppState #$state
object "State<WidgetsApp>\n**_WidgetsAppState** :" as wast #$state
object "State<Router<T>>\n**_RouterState**<Object> :" as topRState #$state {
    RestorationMixin
}
object topRState <<highlighted>> {
}
object "State<Navigator>\n**NavigatorState** :" as rootNState #$state
object rootNState <<highlighted>> {
}
  object "Iterable<_RouteEntry>\n**_History** :" as rootHistory {
     ChangeNotifier
  }
    ' object "RouteTransitionRecord\n_RouteEntry :" as screenARouteEntry
    object "RouteTransitionRecord\n_RouteEntry :" as childRouterRouteEntry
object "State<Overlay>\n**OverlayState** :" as rootOverlayState #$state
object "State<Router<T>>\n**_RouterState**<Object> :" as childRState #$state {
    RestorationMixin
}
object childRState <<highlighted>> {
}
object "_RoutePlaceholder\nRoute<T>\nOverlayRoute<T>\nTransitionRoute<T>\nModalRoute<T>\nPageRoute<T>\n_PageBasedMaterialPageRoute<T> : " as childRouterRoute {
      MaterialRouteTransitionMixin<T>
}
' object "_RoutePlaceholder\nRoute<T>\nOverlayRoute<T>\nTransitionRoute<T>\nModalRoute<T>\nPageRoute<T>\n_PageBasedMaterialPageRoute<T> : " as screenARoute {
'       MaterialRouteTransitionMixin<T>
' }
' object "State<_OverlayEntryWidget>\n**_OverlayEntryWidgetState** :" as screeAOEState #$state
object "State<_OverlayEntryWidget>\n**_OverlayEntryWidgetState** :" as ignoreOEState #$state
object "State<_OverlayEntryWidget>\n**_OverlayEntryWidgetState** :" as childRouterOEState #$state
object "State<Navigator>\n**NavigatorState** :" as childNState #$state
object childNState <<highlighted>> {
}
object "State<Overlay>\n**OverlayState** :" as childOverlayState #$state


rootNState "_history" *-- rootHistory : "\t\t"
' rootHistory *-- screenARouteEntry : "\t\t"
rootHistory *-- childRouterRouteEntry : "\t\t"
' screenARouteEntry *-- screenARoute
childRouterRouteEntry *-- childRouterRoute

materialAppElement "_state" -- myAppState #$stateLink
widgetsAppElement "_state" -- wast #$stateLink
rootRouterElement "_state" --- topRState #$stateLink
rootNavigatorElement "_state" -- rootNState #$stateLink
rootOverlayElement "_state" -- rootOverlayState #$stateLink
' OEEScreenA "_state" -- screeAOEState #$stateLink
OEEIgnore "_state" -- ignoreOEState #$stateLink
OEEChildRouter "_state" -- childRouterOEState #$stateLink
childRouterSFE "_state" --- childRState #$stateLink
childNavigatorSFE "_state" -- childNState #$stateLink
childOverlayElement "_state" -- childOverlayState #$stateLink
}
package RenderObjects {
    !$RB="RenderObject\nRenderBox"
    object "$RB\nRenderFlex :" as renderFlex #$renderObject
    object "$RB\nRenderFlex :" as childRenderFlex #$renderObject

    renderFlex ------- "_parent" childRenderFlex
}
' Widgets -[hidden]-> Elements

' widgets to elements
'-------------------------------------------------------------------------------
myApp <- "widget" materialAppElement #$widgetLink
rootN <- "widget" rootNavigatorElement #$widgetLink
wapp <- "widget" widgetsAppElement #$widgetLink
topr <- "widget" rootRouterElement #$widgetLink
rootOverlay <- "widget" rootOverlayElement #$widgetLink
rootTheatre <- "widget" theatreRenderObjectElement #$widgetLink
' screenA <- "widget" screenASLE #$widgetLink
ignore <- "widget" ignorePointerSFE #$widgetLink
childRouter <- "widget" childRouterSFE #$widgetLink
childN <- "widget" childNavigatorSFE #$widgetLink
childOverlay <- "widget" childOverlayElement #$widgetLink
childTheatre <- "widget" childTheatreRenderObjectElement #$widgetLink

' elements to renderObjects
'-------------------------------------------------------------------------------
theatreRenderObjectElement "_renderObject" -> renderFlex #$renderLink
childTheatreRenderObjectElement "_renderObject" -> childRenderFlex #$renderLink

' states to widgets (build)
'-------------------------------------------------------------------------------

myAppState "build >>>\t" ..> wapp
wast "build >>>\t" ..> topr
topRState "build >>>\t" ..> rootN
rootNState "build >>>\t" ..> rootOverlay
rootOverlayState "build >>>\t" ..> rootTheatre
ignoreOEState "build" ..> ignore 
childRouterOEState "build" ..> childRouter
childRState "build" ..> childN
childNState "build >>>\t" ..> childOverlay
childOverlayState "build >>>\t" ..> childTheatre

' createRoute
'-------------------------------------------------------------------------------
childRouterPage "createRoute" .> childRouterRoute


@enduml

@startuml
class Router<T>
class StatefulWidget
class Widget
class DiagnosticableTree
class Object

class Listenable
class RouterDelegate<T>

Object <|-- DiagnosticableTree
DiagnosticableTree <|-- Widget
Widget <|-- StatefulWidget
StatefulWidget <|-- Router

Listenable <|-- RouterDelegate
@enduml

@startuml

!$userDefined=LightYellow

class "Navigator" as n #$userDefined
class "NavigatorState" as ns
class "_History" as h
class "List<Page<T>>" as l #$userDefined
class "MaterialPage" as mp #$userDefined {
    +Route<T> createRoute(BuildContext context)
}
class "Widget" as w #$userDefined
class "List<_RootEntry>" as lre
class "_RouteEntry" as re {
    +bool pageBased
}
class "_PageBasedMaterialPageRoute<dynamic>" as r
class "List<OverlayEntry>" as loe
class "OverlayEntry" as oe

n "pages" *- l : "\t"
l *- "*" mp : "\t"
mp "child" *- w : "\t"

n "_state" -- "widget" ns

' iterable <|-- h
' cn <.. h : <<width>>
ns "_history" *-- h
h "_value" *-- lre
lre *- "*" re
re *-- r

mp <-- "_settings" r
r "_overlayEntries" *-- loe
loe *- "*" oe

oe -- r

@enduml

@startuml
object BookRouterDelegate
object BookRouteInformationParser
object BookAppState
object RootNavigator
object AppShell
object Scaffold
object Router
object InnerRouterDelegate
object ChildBackButtonDispatcher
object InnerNavigator
class List<Page>

RouterDelegate <|-- BookRouterDelegate
BookRouterDelegate -> BookAppState : addListener(notifyListener)
BookRouterDelegate -- RootNavigator : build
RootNavigator *-- AppShell : pages
AppShell -- Scaffold : build
Scaffold *-- Router : body
Router *-- InnerRouterDelegate
Router *-- ChildBackButtonDispatcher
InnerRouterDelegate -- InnerNavigator : build
InnerNavigator *-- List
List *-- BookListScreen
List *-- BookDetailsScreen
List *-- SettingsScreen
@enduml