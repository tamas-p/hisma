@startuml sm_object diagram
title SMObjectDiagram for visualization

object "parentSM : StateMachine" as parentSM
object "state : State" as state
object "region : Region" as region
object "childSM : StateMachine" as child

parentSM "states" *-- "0..*" state
state "regions" *-- "0..*" region
region "machine" *-- "1" child

@enduml

@startuml sm_callback_chain
title Class diagram showing how child machine can communicate with its parent machine through callbacks

!$notify = Red
!$notifyStyle = '#red,thickness=1'

object "parentSM : StateMachine" as parentSM
object "state : State" as state
object "region : Region" as region
object "childSM : StateMachine" as child

object "event : Event" as event
region "exitConnectors" o- event : \t\t\t

object "exitPointId : Enum" as exitPointId
exitPointId .. (region, event) 

object "trigger : Trigger" as trigger
object "entryPointId : Enum" as entryPointId
entryPointId -o "entryConnectors" region : \t\t
trigger .. (region, entryPointId)

object "_processMachineNotification : void Function(Message message)" as _processMachineNotification 
region *-- _processMachineNotification 
_processMachineNotification <-[$notifyStyle]- "notifyRegion" child
object "_processRegionNotification : void Function(Message message)" as _processRegionNotification
state *-- _processRegionNotification
_processRegionNotification <-[$notifyStyle]-- "notifyState" region

object "_processStateNotification : void Function(Message message)" as _processStateNotification
parentSM *-- _processStateNotification : \t\t
_processStateNotification <-[$notifyStyle]- "notifyMachine" state
@enduml

@startuml messages
abstract class Message
class StateChangeNotification
class ExitNotificationFromRegion<E>
class ExitNotificationFromMachine<E>

Message <|-- StateChangeNotification
Message <|-- ExitNotificationFromRegion
Message <|-- ExitNotificationFromMachine
@enduml
